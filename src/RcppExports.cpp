// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/imager.h"
#include <Rcpp.h>

using namespace Rcpp;

// RGBtoHSL
NumericVector RGBtoHSL(NumericVector im);
RcppExport SEXP _imager_RGBtoHSL(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(RGBtoHSL(im));
    return rcpp_result_gen;
END_RCPP
}
// RGBtoXYZ
NumericVector RGBtoXYZ(NumericVector im);
RcppExport SEXP _imager_RGBtoXYZ(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(RGBtoXYZ(im));
    return rcpp_result_gen;
END_RCPP
}
// XYZtoRGB
NumericVector XYZtoRGB(NumericVector im);
RcppExport SEXP _imager_XYZtoRGB(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(XYZtoRGB(im));
    return rcpp_result_gen;
END_RCPP
}
// HSLtoRGB
NumericVector HSLtoRGB(NumericVector im);
RcppExport SEXP _imager_HSLtoRGB(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(HSLtoRGB(im));
    return rcpp_result_gen;
END_RCPP
}
// RGBtoHSV
NumericVector RGBtoHSV(NumericVector im);
RcppExport SEXP _imager_RGBtoHSV(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(RGBtoHSV(im));
    return rcpp_result_gen;
END_RCPP
}
// HSVtoRGB
NumericVector HSVtoRGB(NumericVector im);
RcppExport SEXP _imager_HSVtoRGB(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(HSVtoRGB(im));
    return rcpp_result_gen;
END_RCPP
}
// RGBtoHSI
NumericVector RGBtoHSI(NumericVector im);
RcppExport SEXP _imager_RGBtoHSI(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(RGBtoHSI(im));
    return rcpp_result_gen;
END_RCPP
}
// HSItoRGB
NumericVector HSItoRGB(NumericVector im);
RcppExport SEXP _imager_HSItoRGB(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(HSItoRGB(im));
    return rcpp_result_gen;
END_RCPP
}
// RGBtosRGB
NumericVector RGBtosRGB(NumericVector im);
RcppExport SEXP _imager_RGBtosRGB(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(RGBtosRGB(im));
    return rcpp_result_gen;
END_RCPP
}
// sRGBtoRGB
NumericVector sRGBtoRGB(NumericVector im);
RcppExport SEXP _imager_sRGBtoRGB(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(sRGBtoRGB(im));
    return rcpp_result_gen;
END_RCPP
}
// RGBtoYCbCr
NumericVector RGBtoYCbCr(NumericVector im);
RcppExport SEXP _imager_RGBtoYCbCr(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(RGBtoYCbCr(im));
    return rcpp_result_gen;
END_RCPP
}
// YCbCrtoRGB
NumericVector YCbCrtoRGB(NumericVector im);
RcppExport SEXP _imager_YCbCrtoRGB(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(YCbCrtoRGB(im));
    return rcpp_result_gen;
END_RCPP
}
// RGBtoYUV
NumericVector RGBtoYUV(NumericVector im);
RcppExport SEXP _imager_RGBtoYUV(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(RGBtoYUV(im));
    return rcpp_result_gen;
END_RCPP
}
// YUVtoRGB
NumericVector YUVtoRGB(NumericVector im);
RcppExport SEXP _imager_YUVtoRGB(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(YUVtoRGB(im));
    return rcpp_result_gen;
END_RCPP
}
// LabtoRGB
NumericVector LabtoRGB(NumericVector im);
RcppExport SEXP _imager_LabtoRGB(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(LabtoRGB(im));
    return rcpp_result_gen;
END_RCPP
}
// RGBtoLab
NumericVector RGBtoLab(NumericVector im);
RcppExport SEXP _imager_RGBtoLab(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(RGBtoLab(im));
    return rcpp_result_gen;
END_RCPP
}
// LabtoXYZ
NumericVector LabtoXYZ(NumericVector im);
RcppExport SEXP _imager_LabtoXYZ(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(LabtoXYZ(im));
    return rcpp_result_gen;
END_RCPP
}
// XYZtoLab
NumericVector XYZtoLab(NumericVector im);
RcppExport SEXP _imager_XYZtoLab(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(XYZtoLab(im));
    return rcpp_result_gen;
END_RCPP
}
// LabtosRGB
NumericVector LabtosRGB(NumericVector im);
RcppExport SEXP _imager_LabtosRGB(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(LabtosRGB(im));
    return rcpp_result_gen;
END_RCPP
}
// sRGBtoLab
NumericVector sRGBtoLab(NumericVector im);
RcppExport SEXP _imager_sRGBtoLab(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(sRGBtoLab(im));
    return rcpp_result_gen;
END_RCPP
}
// getXc
NumericVector getXc(int x, int y, int z, int c);
RcppExport SEXP _imager_getXc(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(getXc(x, y, z, c));
    return rcpp_result_gen;
END_RCPP
}
// getYc
NumericVector getYc(int x, int y, int z, int c);
RcppExport SEXP _imager_getYc(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(getYc(x, y, z, c));
    return rcpp_result_gen;
END_RCPP
}
// getZc
NumericVector getZc(int x, int y, int z, int c);
RcppExport SEXP _imager_getZc(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(getZc(x, y, z, c));
    return rcpp_result_gen;
END_RCPP
}
// getCc
NumericVector getCc(int x, int y, int z, int c);
RcppExport SEXP _imager_getCc(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(getCc(x, y, z, c));
    return rcpp_result_gen;
END_RCPP
}
// display_
void display_(NumericVector im, bool rescale);
RcppExport SEXP _imager_display_(SEXP imSEXP, SEXP rescaleSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< bool >::type rescale(rescaleSEXP);
    display_(im, rescale);
    return R_NilValue;
END_RCPP
}
// display_list
void display_list(List imlist);
RcppExport SEXP _imager_display_list(SEXP imlistSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type imlist(imlistSEXP);
    display_list(imlist);
    return R_NilValue;
END_RCPP
}
// play
void play(NumericVector vid, bool loop, unsigned long delay, bool normalise);
RcppExport SEXP _imager_play(SEXP vidSEXP, SEXP loopSEXP, SEXP delaySEXP, SEXP normaliseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vid(vidSEXP);
    Rcpp::traits::input_parameter< bool >::type loop(loopSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type delay(delaySEXP);
    Rcpp::traits::input_parameter< bool >::type normalise(normaliseSEXP);
    play(vid, loop, delay, normalise);
    return R_NilValue;
END_RCPP
}
// select
NumericVector select(NumericVector im, int type);
RcppExport SEXP _imager_select(SEXP imSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(select(im, type));
    return rcpp_result_gen;
END_RCPP
}
// bucket_fill
NumericVector bucket_fill(NumericVector im, int x, int y, int z, NumericVector color, float opacity, float sigma, bool high_connexity);
RcppExport SEXP _imager_bucket_fill(SEXP imSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP colorSEXP, SEXP opacitySEXP, SEXP sigmaSEXP, SEXP high_connexitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type color(colorSEXP);
    Rcpp::traits::input_parameter< float >::type opacity(opacitySEXP);
    Rcpp::traits::input_parameter< float >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type high_connexity(high_connexitySEXP);
    rcpp_result_gen = Rcpp::wrap(bucket_fill(im, x, y, z, color, opacity, sigma, high_connexity));
    return rcpp_result_gen;
END_RCPP
}
// bucket_select
LogicalVector bucket_select(NumericVector im, int x, int y, int z, float sigma, bool high_connexity);
RcppExport SEXP _imager_bucket_select(SEXP imSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP sigmaSEXP, SEXP high_connexitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type z(zSEXP);
    Rcpp::traits::input_parameter< float >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type high_connexity(high_connexitySEXP);
    rcpp_result_gen = Rcpp::wrap(bucket_select(im, x, y, z, sigma, high_connexity));
    return rcpp_result_gen;
END_RCPP
}
// draw_circle
NumericVector draw_circle(NumericVector im, IntegerVector x, IntegerVector y, int radius, NumericVector color, double opacity, bool filled);
RcppExport SEXP _imager_draw_circle(SEXP imSEXP, SEXP xSEXP, SEXP ySEXP, SEXP radiusSEXP, SEXP colorSEXP, SEXP opacitySEXP, SEXP filledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type color(colorSEXP);
    Rcpp::traits::input_parameter< double >::type opacity(opacitySEXP);
    Rcpp::traits::input_parameter< bool >::type filled(filledSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_circle(im, x, y, radius, color, opacity, filled));
    return rcpp_result_gen;
END_RCPP
}
// draw_circle_
NumericVector draw_circle_(NumericVector im, IntegerVector x, IntegerVector y, IntegerVector radius, NumericMatrix color, NumericVector opacity, bool filled);
RcppExport SEXP _imager_draw_circle_(SEXP imSEXP, SEXP xSEXP, SEXP ySEXP, SEXP radiusSEXP, SEXP colorSEXP, SEXP opacitySEXP, SEXP filledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type color(colorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type opacity(opacitySEXP);
    Rcpp::traits::input_parameter< bool >::type filled(filledSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_circle_(im, x, y, radius, color, opacity, filled));
    return rcpp_result_gen;
END_RCPP
}
// draw_rect_
NumericVector draw_rect_(NumericVector im, IntegerVector x0, IntegerVector y0, IntegerVector x1, IntegerVector y1, NumericVector color, double opacity, bool filled);
RcppExport SEXP _imager_draw_rect_(SEXP imSEXP, SEXP x0SEXP, SEXP y0SEXP, SEXP x1SEXP, SEXP y1SEXP, SEXP colorSEXP, SEXP opacitySEXP, SEXP filledSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type color(colorSEXP);
    Rcpp::traits::input_parameter< double >::type opacity(opacitySEXP);
    Rcpp::traits::input_parameter< bool >::type filled(filledSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_rect_(im, x0, y0, x1, y1, color, opacity, filled));
    return rcpp_result_gen;
END_RCPP
}
// draw_poly_
NumericVector draw_poly_(NumericVector im, NumericVector points, NumericVector color, float opacity);
RcppExport SEXP _imager_draw_poly_(SEXP imSEXP, SEXP pointsSEXP, SEXP colorSEXP, SEXP opacitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type color(colorSEXP);
    Rcpp::traits::input_parameter< float >::type opacity(opacitySEXP);
    rcpp_result_gen = Rcpp::wrap(draw_poly_(im, points, color, opacity));
    return rcpp_result_gen;
END_RCPP
}
// draw_text_
NumericVector draw_text_(NumericVector im, int x, int y, std::string text, NumericVector color, double opacity, int fsize);
RcppExport SEXP _imager_draw_text_(SEXP imSEXP, SEXP xSEXP, SEXP ySEXP, SEXP textSEXP, SEXP colorSEXP, SEXP opacitySEXP, SEXP fsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type text(textSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type color(colorSEXP);
    Rcpp::traits::input_parameter< double >::type opacity(opacitySEXP);
    Rcpp::traits::input_parameter< int >::type fsize(fsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_text_(im, x, y, text, color, opacity, fsize));
    return rcpp_result_gen;
END_RCPP
}
// deriche
NumericVector deriche(NumericVector im, float sigma, int order, char axis, bool neumann);
RcppExport SEXP _imager_deriche(SEXP imSEXP, SEXP sigmaSEXP, SEXP orderSEXP, SEXP axisSEXP, SEXP neumannSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< float >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< char >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< bool >::type neumann(neumannSEXP);
    rcpp_result_gen = Rcpp::wrap(deriche(im, sigma, order, axis, neumann));
    return rcpp_result_gen;
END_RCPP
}
// vanvliet
NumericVector vanvliet(NumericVector im, float sigma, int order, char axis, bool neumann);
RcppExport SEXP _imager_vanvliet(SEXP imSEXP, SEXP sigmaSEXP, SEXP orderSEXP, SEXP axisSEXP, SEXP neumannSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< float >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< char >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< bool >::type neumann(neumannSEXP);
    rcpp_result_gen = Rcpp::wrap(vanvliet(im, sigma, order, axis, neumann));
    return rcpp_result_gen;
END_RCPP
}
// isoblur_
NumericVector isoblur_(NumericVector im, float sigma, bool neumann, bool gaussian);
RcppExport SEXP _imager_isoblur_(SEXP imSEXP, SEXP sigmaSEXP, SEXP neumannSEXP, SEXP gaussianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< float >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type neumann(neumannSEXP);
    Rcpp::traits::input_parameter< bool >::type gaussian(gaussianSEXP);
    rcpp_result_gen = Rcpp::wrap(isoblur_(im, sigma, neumann, gaussian));
    return rcpp_result_gen;
END_RCPP
}
// medianblur
NumericVector medianblur(NumericVector im, int n, float threshold);
RcppExport SEXP _imager_medianblur(SEXP imSEXP, SEXP nSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< float >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(medianblur(im, n, threshold));
    return rcpp_result_gen;
END_RCPP
}
// boxblur
NumericVector boxblur(NumericVector im, float boxsize, bool neumann);
RcppExport SEXP _imager_boxblur(SEXP imSEXP, SEXP boxsizeSEXP, SEXP neumannSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< float >::type boxsize(boxsizeSEXP);
    Rcpp::traits::input_parameter< bool >::type neumann(neumannSEXP);
    rcpp_result_gen = Rcpp::wrap(boxblur(im, boxsize, neumann));
    return rcpp_result_gen;
END_RCPP
}
// imlap
NumericVector imlap(NumericVector im);
RcppExport SEXP _imager_imlap(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(imlap(im));
    return rcpp_result_gen;
END_RCPP
}
// boxblur_xy
NumericVector boxblur_xy(NumericVector im, float sx, float sy, bool neumann);
RcppExport SEXP _imager_boxblur_xy(SEXP imSEXP, SEXP sxSEXP, SEXP sySEXP, SEXP neumannSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< float >::type sx(sxSEXP);
    Rcpp::traits::input_parameter< float >::type sy(sySEXP);
    Rcpp::traits::input_parameter< bool >::type neumann(neumannSEXP);
    rcpp_result_gen = Rcpp::wrap(boxblur_xy(im, sx, sy, neumann));
    return rcpp_result_gen;
END_RCPP
}
// correlate
NumericVector correlate(NumericVector im, NumericVector filter, bool dirichlet, bool normalise);
RcppExport SEXP _imager_correlate(SEXP imSEXP, SEXP filterSEXP, SEXP dirichletSEXP, SEXP normaliseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< bool >::type dirichlet(dirichletSEXP);
    Rcpp::traits::input_parameter< bool >::type normalise(normaliseSEXP);
    rcpp_result_gen = Rcpp::wrap(correlate(im, filter, dirichlet, normalise));
    return rcpp_result_gen;
END_RCPP
}
// convolve
NumericVector convolve(NumericVector im, NumericVector filter, bool dirichlet, bool normalise);
RcppExport SEXP _imager_convolve(SEXP imSEXP, SEXP filterSEXP, SEXP dirichletSEXP, SEXP normaliseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type filter(filterSEXP);
    Rcpp::traits::input_parameter< bool >::type dirichlet(dirichletSEXP);
    Rcpp::traits::input_parameter< bool >::type normalise(normaliseSEXP);
    rcpp_result_gen = Rcpp::wrap(convolve(im, filter, dirichlet, normalise));
    return rcpp_result_gen;
END_RCPP
}
// sharpen
NumericVector sharpen(NumericVector im, float amplitude, bool sharpen_type, float edge, float alpha, float sigma);
RcppExport SEXP _imager_sharpen(SEXP imSEXP, SEXP amplitudeSEXP, SEXP sharpen_typeSEXP, SEXP edgeSEXP, SEXP alphaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< float >::type amplitude(amplitudeSEXP);
    Rcpp::traits::input_parameter< bool >::type sharpen_type(sharpen_typeSEXP);
    Rcpp::traits::input_parameter< float >::type edge(edgeSEXP);
    Rcpp::traits::input_parameter< float >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< float >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(sharpen(im, amplitude, sharpen_type, edge, alpha, sigma));
    return rcpp_result_gen;
END_RCPP
}
// get_gradient
List get_gradient(NumericVector im, std::string axes, int scheme);
RcppExport SEXP _imager_get_gradient(SEXP imSEXP, SEXP axesSEXP, SEXP schemeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< std::string >::type axes(axesSEXP);
    Rcpp::traits::input_parameter< int >::type scheme(schemeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_gradient(im, axes, scheme));
    return rcpp_result_gen;
END_RCPP
}
// get_hessian
List get_hessian(NumericVector im, std::string axes);
RcppExport SEXP _imager_get_hessian(SEXP imSEXP, SEXP axesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< std::string >::type axes(axesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_hessian(im, axes));
    return rcpp_result_gen;
END_RCPP
}
// diffusion_tensors
NumericVector diffusion_tensors(NumericVector im, float sharpness, float anisotropy, float alpha, float sigma, bool is_sqrt);
RcppExport SEXP _imager_diffusion_tensors(SEXP imSEXP, SEXP sharpnessSEXP, SEXP anisotropySEXP, SEXP alphaSEXP, SEXP sigmaSEXP, SEXP is_sqrtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< float >::type sharpness(sharpnessSEXP);
    Rcpp::traits::input_parameter< float >::type anisotropy(anisotropySEXP);
    Rcpp::traits::input_parameter< float >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< float >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type is_sqrt(is_sqrtSEXP);
    rcpp_result_gen = Rcpp::wrap(diffusion_tensors(im, sharpness, anisotropy, alpha, sigma, is_sqrt));
    return rcpp_result_gen;
END_RCPP
}
// haar
NumericVector haar(NumericVector im, bool inverse, int nb_scales);
RcppExport SEXP _imager_haar(SEXP imSEXP, SEXP inverseSEXP, SEXP nb_scalesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< int >::type nb_scales(nb_scalesSEXP);
    rcpp_result_gen = Rcpp::wrap(haar(im, inverse, nb_scales));
    return rcpp_result_gen;
END_RCPP
}
// FFT_complex
List FFT_complex(NumericVector real, NumericVector imag, bool inverse, int nb_threads);
RcppExport SEXP _imager_FFT_complex(SEXP realSEXP, SEXP imagSEXP, SEXP inverseSEXP, SEXP nb_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type real(realSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type imag(imagSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< int >::type nb_threads(nb_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(FFT_complex(real, imag, inverse, nb_threads));
    return rcpp_result_gen;
END_RCPP
}
// FFT_realim
List FFT_realim(NumericVector real, bool inverse, int nb_threads);
RcppExport SEXP _imager_FFT_realim(SEXP realSEXP, SEXP inverseSEXP, SEXP nb_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type real(realSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< int >::type nb_threads(nb_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(FFT_realim(real, inverse, nb_threads));
    return rcpp_result_gen;
END_RCPP
}
// FFT_realout
NumericVector FFT_realout(NumericVector real, NumericVector imag, bool inverse, int nb_threads);
RcppExport SEXP _imager_FFT_realout(SEXP realSEXP, SEXP imagSEXP, SEXP inverseSEXP, SEXP nb_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type real(realSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type imag(imagSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< int >::type nb_threads(nb_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(FFT_realout(real, imag, inverse, nb_threads));
    return rcpp_result_gen;
END_RCPP
}
// displacement
NumericVector displacement(NumericVector sourceIm, NumericVector destIm, float smoothness, float precision, unsigned int nb_scales, unsigned int iteration_max, bool is_backward);
RcppExport SEXP _imager_displacement(SEXP sourceImSEXP, SEXP destImSEXP, SEXP smoothnessSEXP, SEXP precisionSEXP, SEXP nb_scalesSEXP, SEXP iteration_maxSEXP, SEXP is_backwardSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type sourceIm(sourceImSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type destIm(destImSEXP);
    Rcpp::traits::input_parameter< float >::type smoothness(smoothnessSEXP);
    Rcpp::traits::input_parameter< float >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nb_scales(nb_scalesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type iteration_max(iteration_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type is_backward(is_backwardSEXP);
    rcpp_result_gen = Rcpp::wrap(displacement(sourceIm, destIm, smoothness, precision, nb_scales, iteration_max, is_backward));
    return rcpp_result_gen;
END_RCPP
}
// blur_anisotropic
NumericVector blur_anisotropic(NumericVector im, float amplitude, float sharpness, float anisotropy, float alpha, float sigma, float dl, float da, float gauss_prec, unsigned int interpolation_type, bool fast_approx);
RcppExport SEXP _imager_blur_anisotropic(SEXP imSEXP, SEXP amplitudeSEXP, SEXP sharpnessSEXP, SEXP anisotropySEXP, SEXP alphaSEXP, SEXP sigmaSEXP, SEXP dlSEXP, SEXP daSEXP, SEXP gauss_precSEXP, SEXP interpolation_typeSEXP, SEXP fast_approxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< float >::type amplitude(amplitudeSEXP);
    Rcpp::traits::input_parameter< float >::type sharpness(sharpnessSEXP);
    Rcpp::traits::input_parameter< float >::type anisotropy(anisotropySEXP);
    Rcpp::traits::input_parameter< float >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< float >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< float >::type dl(dlSEXP);
    Rcpp::traits::input_parameter< float >::type da(daSEXP);
    Rcpp::traits::input_parameter< float >::type gauss_prec(gauss_precSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interpolation_type(interpolation_typeSEXP);
    Rcpp::traits::input_parameter< bool >::type fast_approx(fast_approxSEXP);
    rcpp_result_gen = Rcpp::wrap(blur_anisotropic(im, amplitude, sharpness, anisotropy, alpha, sigma, dl, da, gauss_prec, interpolation_type, fast_approx));
    return rcpp_result_gen;
END_RCPP
}
// periodic_part
NumericVector periodic_part(NumericVector im);
RcppExport SEXP _imager_periodic_part(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(periodic_part(im));
    return rcpp_result_gen;
END_RCPP
}
// hough_line_px
NumericVector hough_line_px(LogicalVector px, NumericVector theta);
RcppExport SEXP _imager_hough_line_px(SEXP pxSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type px(pxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(hough_line_px(px, theta));
    return rcpp_result_gen;
END_RCPP
}
// hough_line_grad
NumericVector hough_line_grad(NumericVector im, int ntheta, double alpha);
RcppExport SEXP _imager_hough_line_grad(SEXP imSEXP, SEXP nthetaSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type ntheta(nthetaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(hough_line_grad(im, ntheta, alpha));
    return rcpp_result_gen;
END_RCPP
}
// hough_circle_
NumericVector hough_circle_(LogicalVector px, int radius);
RcppExport SEXP _imager_hough_circle_(SEXP pxSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type px(pxSEXP);
    Rcpp::traits::input_parameter< int >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(hough_circle_(px, radius));
    return rcpp_result_gen;
END_RCPP
}
// bgraph
List bgraph(LogicalVector px);
RcppExport SEXP _imager_bgraph(SEXP pxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type px(pxSEXP);
    rcpp_result_gen = Rcpp::wrap(bgraph(px));
    return rcpp_result_gen;
END_RCPP
}
// interact_
NumericVector interact_(Function fun, NumericVector init, std::string title);
RcppExport SEXP _imager_interact_(SEXP funSEXP, SEXP initSEXP, SEXP titleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type fun(funSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< std::string >::type title(titleSEXP);
    rcpp_result_gen = Rcpp::wrap(interact_(fun, init, title));
    return rcpp_result_gen;
END_RCPP
}
// interp_xy
NumericVector interp_xy(NumericVector inp, NumericVector ix, NumericVector iy, int z, int c, bool cubic);
RcppExport SEXP _imager_interp_xy(SEXP inpSEXP, SEXP ixSEXP, SEXP iySEXP, SEXP zSEXP, SEXP cSEXP, SEXP cubicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type inp(inpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ix(ixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type iy(iySEXP);
    Rcpp::traits::input_parameter< int >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< bool >::type cubic(cubicSEXP);
    rcpp_result_gen = Rcpp::wrap(interp_xy(inp, ix, iy, z, c, cubic));
    return rcpp_result_gen;
END_RCPP
}
// interp_xyz
NumericVector interp_xyz(NumericVector inp, NumericVector ix, NumericVector iy, NumericVector iz, int c, bool cubic);
RcppExport SEXP _imager_interp_xyz(SEXP inpSEXP, SEXP ixSEXP, SEXP iySEXP, SEXP izSEXP, SEXP cSEXP, SEXP cubicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type inp(inpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ix(ixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type iy(iySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type iz(izSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    Rcpp::traits::input_parameter< bool >::type cubic(cubicSEXP);
    rcpp_result_gen = Rcpp::wrap(interp_xyz(inp, ix, iy, iz, c, cubic));
    return rcpp_result_gen;
END_RCPP
}
// interp_xyzc
NumericVector interp_xyzc(NumericVector inp, NumericVector ix, NumericVector iy, NumericVector iz, IntegerVector ic, bool cubic);
RcppExport SEXP _imager_interp_xyzc(SEXP inpSEXP, SEXP ixSEXP, SEXP iySEXP, SEXP izSEXP, SEXP icSEXP, SEXP cubicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type inp(inpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ix(ixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type iy(iySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type iz(izSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ic(icSEXP);
    Rcpp::traits::input_parameter< bool >::type cubic(cubicSEXP);
    rcpp_result_gen = Rcpp::wrap(interp_xyzc(inp, ix, iy, iz, ic, cubic));
    return rcpp_result_gen;
END_RCPP
}
// interp_xyc
NumericVector interp_xyc(NumericVector inp, NumericVector ix, NumericVector iy, int z, IntegerVector ic, bool cubic);
RcppExport SEXP _imager_interp_xyc(SEXP inpSEXP, SEXP ixSEXP, SEXP iySEXP, SEXP zSEXP, SEXP icSEXP, SEXP cubicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type inp(inpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ix(ixSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type iy(iySEXP);
    Rcpp::traits::input_parameter< int >::type z(zSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ic(icSEXP);
    Rcpp::traits::input_parameter< bool >::type cubic(cubicSEXP);
    rcpp_result_gen = Rcpp::wrap(interp_xyc(inp, ix, iy, z, ic, cubic));
    return rcpp_result_gen;
END_RCPP
}
// label
NumericVector label(NumericVector im, bool high_connectivity, double tolerance);
RcppExport SEXP _imager_label(SEXP imSEXP, SEXP high_connectivitySEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< bool >::type high_connectivity(high_connectivitySEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(label(im, high_connectivity, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// blabel
NumericVector blabel(LogicalVector im, bool high_connectivity);
RcppExport SEXP _imager_blabel(SEXP imSEXP, SEXP high_connectivitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< bool >::type high_connectivity(high_connectivitySEXP);
    rcpp_result_gen = Rcpp::wrap(blabel(im, high_connectivity));
    return rcpp_result_gen;
END_RCPP
}
// erode
NumericVector erode(NumericVector im, NumericVector mask, bool boundary_conditions, bool real_mode);
RcppExport SEXP _imager_erode(SEXP imSEXP, SEXP maskSEXP, SEXP boundary_conditionsSEXP, SEXP real_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< bool >::type boundary_conditions(boundary_conditionsSEXP);
    Rcpp::traits::input_parameter< bool >::type real_mode(real_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(erode(im, mask, boundary_conditions, real_mode));
    return rcpp_result_gen;
END_RCPP
}
// berode
LogicalVector berode(LogicalVector im, LogicalVector mask, bool boundary_conditions);
RcppExport SEXP _imager_berode(SEXP imSEXP, SEXP maskSEXP, SEXP boundary_conditionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< bool >::type boundary_conditions(boundary_conditionsSEXP);
    rcpp_result_gen = Rcpp::wrap(berode(im, mask, boundary_conditions));
    return rcpp_result_gen;
END_RCPP
}
// erode_rect
NumericVector erode_rect(NumericVector im, int sx, int sy, int sz);
RcppExport SEXP _imager_erode_rect(SEXP imSEXP, SEXP sxSEXP, SEXP sySEXP, SEXP szSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type sx(sxSEXP);
    Rcpp::traits::input_parameter< int >::type sy(sySEXP);
    Rcpp::traits::input_parameter< int >::type sz(szSEXP);
    rcpp_result_gen = Rcpp::wrap(erode_rect(im, sx, sy, sz));
    return rcpp_result_gen;
END_RCPP
}
// berode_rect
LogicalVector berode_rect(LogicalVector im, int sx, int sy, int sz);
RcppExport SEXP _imager_berode_rect(SEXP imSEXP, SEXP sxSEXP, SEXP sySEXP, SEXP szSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type sx(sxSEXP);
    Rcpp::traits::input_parameter< int >::type sy(sySEXP);
    Rcpp::traits::input_parameter< int >::type sz(szSEXP);
    rcpp_result_gen = Rcpp::wrap(berode_rect(im, sx, sy, sz));
    return rcpp_result_gen;
END_RCPP
}
// erode_square
NumericVector erode_square(NumericVector im, int size);
RcppExport SEXP _imager_erode_square(SEXP imSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(erode_square(im, size));
    return rcpp_result_gen;
END_RCPP
}
// berode_square
LogicalVector berode_square(LogicalVector im, int size);
RcppExport SEXP _imager_berode_square(SEXP imSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(berode_square(im, size));
    return rcpp_result_gen;
END_RCPP
}
// dilate
NumericVector dilate(NumericVector im, NumericVector mask, bool boundary_conditions, bool real_mode);
RcppExport SEXP _imager_dilate(SEXP imSEXP, SEXP maskSEXP, SEXP boundary_conditionsSEXP, SEXP real_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< bool >::type boundary_conditions(boundary_conditionsSEXP);
    Rcpp::traits::input_parameter< bool >::type real_mode(real_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(dilate(im, mask, boundary_conditions, real_mode));
    return rcpp_result_gen;
END_RCPP
}
// bdilate
LogicalVector bdilate(LogicalVector im, LogicalVector mask, bool boundary_conditions);
RcppExport SEXP _imager_bdilate(SEXP imSEXP, SEXP maskSEXP, SEXP boundary_conditionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< bool >::type boundary_conditions(boundary_conditionsSEXP);
    rcpp_result_gen = Rcpp::wrap(bdilate(im, mask, boundary_conditions));
    return rcpp_result_gen;
END_RCPP
}
// dilate_rect
NumericVector dilate_rect(NumericVector im, int sx, int sy, int sz);
RcppExport SEXP _imager_dilate_rect(SEXP imSEXP, SEXP sxSEXP, SEXP sySEXP, SEXP szSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type sx(sxSEXP);
    Rcpp::traits::input_parameter< int >::type sy(sySEXP);
    Rcpp::traits::input_parameter< int >::type sz(szSEXP);
    rcpp_result_gen = Rcpp::wrap(dilate_rect(im, sx, sy, sz));
    return rcpp_result_gen;
END_RCPP
}
// bdilate_rect
LogicalVector bdilate_rect(LogicalVector im, int sx, int sy, int sz);
RcppExport SEXP _imager_bdilate_rect(SEXP imSEXP, SEXP sxSEXP, SEXP sySEXP, SEXP szSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type sx(sxSEXP);
    Rcpp::traits::input_parameter< int >::type sy(sySEXP);
    Rcpp::traits::input_parameter< int >::type sz(szSEXP);
    rcpp_result_gen = Rcpp::wrap(bdilate_rect(im, sx, sy, sz));
    return rcpp_result_gen;
END_RCPP
}
// dilate_square
NumericVector dilate_square(NumericVector im, int size);
RcppExport SEXP _imager_dilate_square(SEXP imSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(dilate_square(im, size));
    return rcpp_result_gen;
END_RCPP
}
// bdilate_square
LogicalVector bdilate_square(LogicalVector im, int size);
RcppExport SEXP _imager_bdilate_square(SEXP imSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(bdilate_square(im, size));
    return rcpp_result_gen;
END_RCPP
}
// watershed
NumericVector watershed(NumericVector im, NumericVector priority, bool fill_lines);
RcppExport SEXP _imager_watershed(SEXP imSEXP, SEXP prioritySEXP, SEXP fill_linesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type priority(prioritySEXP);
    Rcpp::traits::input_parameter< bool >::type fill_lines(fill_linesSEXP);
    rcpp_result_gen = Rcpp::wrap(watershed(im, priority, fill_lines));
    return rcpp_result_gen;
END_RCPP
}
// distance_transform
NumericVector distance_transform(NumericVector im, double value, unsigned int metric);
RcppExport SEXP _imager_distance_transform(SEXP imSEXP, SEXP valueSEXP, SEXP metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< double >::type value(valueSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type metric(metricSEXP);
    rcpp_result_gen = Rcpp::wrap(distance_transform(im, value, metric));
    return rcpp_result_gen;
END_RCPP
}
// bdistance_transform
NumericVector bdistance_transform(LogicalVector im, bool value, unsigned int metric);
RcppExport SEXP _imager_bdistance_transform(SEXP imSEXP, SEXP valueSEXP, SEXP metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< bool >::type value(valueSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type metric(metricSEXP);
    rcpp_result_gen = Rcpp::wrap(bdistance_transform(im, value, metric));
    return rcpp_result_gen;
END_RCPP
}
// mopening
NumericVector mopening(NumericVector im, NumericVector mask, bool boundary_conditions, bool real_mode);
RcppExport SEXP _imager_mopening(SEXP imSEXP, SEXP maskSEXP, SEXP boundary_conditionsSEXP, SEXP real_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< bool >::type boundary_conditions(boundary_conditionsSEXP);
    Rcpp::traits::input_parameter< bool >::type real_mode(real_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(mopening(im, mask, boundary_conditions, real_mode));
    return rcpp_result_gen;
END_RCPP
}
// mopening_square
NumericVector mopening_square(NumericVector im, int size);
RcppExport SEXP _imager_mopening_square(SEXP imSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(mopening_square(im, size));
    return rcpp_result_gen;
END_RCPP
}
// mclosing_square
NumericVector mclosing_square(NumericVector im, int size);
RcppExport SEXP _imager_mclosing_square(SEXP imSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(mclosing_square(im, size));
    return rcpp_result_gen;
END_RCPP
}
// mclosing
NumericVector mclosing(NumericVector im, NumericVector mask, bool boundary_conditions, bool real_mode);
RcppExport SEXP _imager_mclosing(SEXP imSEXP, SEXP maskSEXP, SEXP boundary_conditionsSEXP, SEXP real_modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mask(maskSEXP);
    Rcpp::traits::input_parameter< bool >::type boundary_conditions(boundary_conditionsSEXP);
    Rcpp::traits::input_parameter< bool >::type real_mode(real_modeSEXP);
    rcpp_result_gen = Rcpp::wrap(mclosing(im, mask, boundary_conditions, real_mode));
    return rcpp_result_gen;
END_RCPP
}
// reduce_wsum
NumericVector reduce_wsum(List x, NumericVector w, bool na_rm);
RcppExport SEXP _imager_reduce_wsum(SEXP xSEXP, SEXP wSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_wsum(x, w, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// reduce_average
NumericVector reduce_average(List x, bool na_rm);
RcppExport SEXP _imager_reduce_average(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_average(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// reduce_prod
NumericVector reduce_prod(List x, bool na_rm);
RcppExport SEXP _imager_reduce_prod(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_prod(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// reduce_minmax
NumericVector reduce_minmax(List x, bool na_rm, bool max);
RcppExport SEXP _imager_reduce_minmax(SEXP xSEXP, SEXP na_rmSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    Rcpp::traits::input_parameter< bool >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_minmax(x, na_rm, max));
    return rcpp_result_gen;
END_RCPP
}
// reduce_list
NumericVector reduce_list(List x, int summary);
RcppExport SEXP _imager_reduce_list(SEXP xSEXP, SEXP summarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type summary(summarySEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_list(x, summary));
    return rcpp_result_gen;
END_RCPP
}
// reduce_list2
NumericVector reduce_list2(List x, int summary);
RcppExport SEXP _imager_reduce_list2(SEXP xSEXP, SEXP summarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type summary(summarySEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_list2(x, summary));
    return rcpp_result_gen;
END_RCPP
}
// reduce_med
NumericVector reduce_med(List x, bool na_rm);
RcppExport SEXP _imager_reduce_med(SEXP xSEXP, SEXP na_rmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_rm(na_rmSEXP);
    rcpp_result_gen = Rcpp::wrap(reduce_med(x, na_rm));
    return rcpp_result_gen;
END_RCPP
}
// psort
List psort(List x, bool increasing);
RcppExport SEXP _imager_psort(SEXP xSEXP, SEXP increasingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type increasing(increasingSEXP);
    rcpp_result_gen = Rcpp::wrap(psort(x, increasing));
    return rcpp_result_gen;
END_RCPP
}
// porder
List porder(List x, bool increasing);
RcppExport SEXP _imager_porder(SEXP xSEXP, SEXP increasingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type increasing(increasingSEXP);
    rcpp_result_gen = Rcpp::wrap(porder(x, increasing));
    return rcpp_result_gen;
END_RCPP
}
// prank
List prank(List x, bool increasing);
RcppExport SEXP _imager_prank(SEXP xSEXP, SEXP increasingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type increasing(increasingSEXP);
    rcpp_result_gen = Rcpp::wrap(prank(x, increasing));
    return rcpp_result_gen;
END_RCPP
}
// autocrop_
NumericVector autocrop_(NumericVector im, NumericVector color, std::string axes);
RcppExport SEXP _imager_autocrop_(SEXP imSEXP, SEXP colorSEXP, SEXP axesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type color(colorSEXP);
    Rcpp::traits::input_parameter< std::string >::type axes(axesSEXP);
    rcpp_result_gen = Rcpp::wrap(autocrop_(im, color, axes));
    return rcpp_result_gen;
END_RCPP
}
// rotate
NumericVector rotate(NumericVector im, float angle, unsigned int interpolation, unsigned int boundary);
RcppExport SEXP _imager_rotate(SEXP imSEXP, SEXP angleSEXP, SEXP interpolationSEXP, SEXP boundarySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< float >::type angle(angleSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interpolation(interpolationSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type boundary(boundarySEXP);
    rcpp_result_gen = Rcpp::wrap(rotate(im, angle, interpolation, boundary));
    return rcpp_result_gen;
END_RCPP
}
// rotate_xy
NumericVector rotate_xy(NumericVector im, float angle, float cx, float cy, unsigned int interpolation, unsigned int boundary_conditions);
RcppExport SEXP _imager_rotate_xy(SEXP imSEXP, SEXP angleSEXP, SEXP cxSEXP, SEXP cySEXP, SEXP interpolationSEXP, SEXP boundary_conditionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< float >::type angle(angleSEXP);
    Rcpp::traits::input_parameter< float >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< float >::type cy(cySEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interpolation(interpolationSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type boundary_conditions(boundary_conditionsSEXP);
    rcpp_result_gen = Rcpp::wrap(rotate_xy(im, angle, cx, cy, interpolation, boundary_conditions));
    return rcpp_result_gen;
END_RCPP
}
// mirror
NumericVector mirror(NumericVector im, char axis);
RcppExport SEXP _imager_mirror(SEXP imSEXP, SEXP axisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< char >::type axis(axisSEXP);
    rcpp_result_gen = Rcpp::wrap(mirror(im, axis));
    return rcpp_result_gen;
END_RCPP
}
// permute_axes
NumericVector permute_axes(NumericVector im, std::string perm);
RcppExport SEXP _imager_permute_axes(SEXP imSEXP, SEXP permSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< std::string >::type perm(permSEXP);
    rcpp_result_gen = Rcpp::wrap(permute_axes(im, perm));
    return rcpp_result_gen;
END_RCPP
}
// resize_doubleXY
NumericVector resize_doubleXY(NumericVector im);
RcppExport SEXP _imager_resize_doubleXY(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(resize_doubleXY(im));
    return rcpp_result_gen;
END_RCPP
}
// resize_halfXY
NumericVector resize_halfXY(NumericVector im);
RcppExport SEXP _imager_resize_halfXY(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(resize_halfXY(im));
    return rcpp_result_gen;
END_RCPP
}
// resize_tripleXY
NumericVector resize_tripleXY(NumericVector im);
RcppExport SEXP _imager_resize_tripleXY(SEXP imSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    rcpp_result_gen = Rcpp::wrap(resize_tripleXY(im));
    return rcpp_result_gen;
END_RCPP
}
// imshift
NumericVector imshift(NumericVector im, int delta_x, int delta_y, int delta_z, int delta_c, int boundary_conditions);
RcppExport SEXP _imager_imshift(SEXP imSEXP, SEXP delta_xSEXP, SEXP delta_ySEXP, SEXP delta_zSEXP, SEXP delta_cSEXP, SEXP boundary_conditionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type delta_x(delta_xSEXP);
    Rcpp::traits::input_parameter< int >::type delta_y(delta_ySEXP);
    Rcpp::traits::input_parameter< int >::type delta_z(delta_zSEXP);
    Rcpp::traits::input_parameter< int >::type delta_c(delta_cSEXP);
    Rcpp::traits::input_parameter< int >::type boundary_conditions(boundary_conditionsSEXP);
    rcpp_result_gen = Rcpp::wrap(imshift(im, delta_x, delta_y, delta_z, delta_c, boundary_conditions));
    return rcpp_result_gen;
END_RCPP
}
// resize
NumericVector resize(NumericVector im, int size_x, int size_y, int size_z, int size_c, int interpolation_type, unsigned int boundary_conditions, float centering_x, float centering_y, float centering_z, float centering_c);
RcppExport SEXP _imager_resize(SEXP imSEXP, SEXP size_xSEXP, SEXP size_ySEXP, SEXP size_zSEXP, SEXP size_cSEXP, SEXP interpolation_typeSEXP, SEXP boundary_conditionsSEXP, SEXP centering_xSEXP, SEXP centering_ySEXP, SEXP centering_zSEXP, SEXP centering_cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type size_x(size_xSEXP);
    Rcpp::traits::input_parameter< int >::type size_y(size_ySEXP);
    Rcpp::traits::input_parameter< int >::type size_z(size_zSEXP);
    Rcpp::traits::input_parameter< int >::type size_c(size_cSEXP);
    Rcpp::traits::input_parameter< int >::type interpolation_type(interpolation_typeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type boundary_conditions(boundary_conditionsSEXP);
    Rcpp::traits::input_parameter< float >::type centering_x(centering_xSEXP);
    Rcpp::traits::input_parameter< float >::type centering_y(centering_ySEXP);
    Rcpp::traits::input_parameter< float >::type centering_z(centering_zSEXP);
    Rcpp::traits::input_parameter< float >::type centering_c(centering_cSEXP);
    rcpp_result_gen = Rcpp::wrap(resize(im, size_x, size_y, size_z, size_c, interpolation_type, boundary_conditions, centering_x, centering_y, centering_z, centering_c));
    return rcpp_result_gen;
END_RCPP
}
// warp
NumericVector warp(NumericVector im, NumericVector warpfield, unsigned int mode, unsigned int interpolation, unsigned int boundary_conditions);
RcppExport SEXP _imager_warp(SEXP imSEXP, SEXP warpfieldSEXP, SEXP modeSEXP, SEXP interpolationSEXP, SEXP boundary_conditionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type warpfield(warpfieldSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type interpolation(interpolationSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type boundary_conditions(boundary_conditionsSEXP);
    rcpp_result_gen = Rcpp::wrap(warp(im, warpfield, mode, interpolation, boundary_conditions));
    return rcpp_result_gen;
END_RCPP
}
// load_image
NumericVector load_image(std::string fname);
RcppExport SEXP _imager_load_image(SEXP fnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fname(fnameSEXP);
    rcpp_result_gen = Rcpp::wrap(load_image(fname));
    return rcpp_result_gen;
END_RCPP
}
// save_image
void save_image(NumericVector im, std::string fname);
RcppExport SEXP _imager_save_image(SEXP imSEXP, SEXP fnameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< std::string >::type fname(fnameSEXP);
    save_image(im, fname);
    return R_NilValue;
END_RCPP
}
// im_split
List im_split(NumericVector im, char axis, int nb);
RcppExport SEXP _imager_im_split(SEXP imSEXP, SEXP axisSEXP, SEXP nbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< char >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    rcpp_result_gen = Rcpp::wrap(im_split(im, axis, nb));
    return rcpp_result_gen;
END_RCPP
}
// im_append
NumericVector im_append(List imlist, char axis);
RcppExport SEXP _imager_im_append(SEXP imlistSEXP, SEXP axisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type imlist(imlistSEXP);
    Rcpp::traits::input_parameter< char >::type axis(axisSEXP);
    rcpp_result_gen = Rcpp::wrap(im_append(imlist, axis));
    return rcpp_result_gen;
END_RCPP
}
// px_append
LogicalVector px_append(List imlist, char axis);
RcppExport SEXP _imager_px_append(SEXP imlistSEXP, SEXP axisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type imlist(imlistSEXP);
    Rcpp::traits::input_parameter< char >::type axis(axisSEXP);
    rcpp_result_gen = Rcpp::wrap(px_append(imlist, axis));
    return rcpp_result_gen;
END_RCPP
}
// patch_summary_cimg
NumericVector patch_summary_cimg(NumericVector im, std::string expr, IntegerVector cx, IntegerVector cy, IntegerVector wx, IntegerVector wy);
RcppExport SEXP _imager_patch_summary_cimg(SEXP imSEXP, SEXP exprSEXP, SEXP cxSEXP, SEXP cySEXP, SEXP wxSEXP, SEXP wySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< std::string >::type expr(exprSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cy(cySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type wx(wxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type wy(wySEXP);
    rcpp_result_gen = Rcpp::wrap(patch_summary_cimg(im, expr, cx, cy, wx, wy));
    return rcpp_result_gen;
END_RCPP
}
// extract_fast
NumericVector extract_fast(NumericVector im, int fun, IntegerVector cx, IntegerVector cy, IntegerVector wx, IntegerVector wy);
RcppExport SEXP _imager_extract_fast(SEXP imSEXP, SEXP funSEXP, SEXP cxSEXP, SEXP cySEXP, SEXP wxSEXP, SEXP wySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< int >::type fun(funSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cy(cySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type wx(wxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type wy(wySEXP);
    rcpp_result_gen = Rcpp::wrap(extract_fast(im, fun, cx, cy, wx, wy));
    return rcpp_result_gen;
END_RCPP
}
// extract_patches
List extract_patches(NumericVector im, IntegerVector cx, IntegerVector cy, IntegerVector wx, IntegerVector wy, int boundary_conditions);
RcppExport SEXP _imager_extract_patches(SEXP imSEXP, SEXP cxSEXP, SEXP cySEXP, SEXP wxSEXP, SEXP wySEXP, SEXP boundary_conditionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cy(cySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type wx(wxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type wy(wySEXP);
    Rcpp::traits::input_parameter< int >::type boundary_conditions(boundary_conditionsSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_patches(im, cx, cy, wx, wy, boundary_conditions));
    return rcpp_result_gen;
END_RCPP
}
// extract_patches3D
List extract_patches3D(NumericVector im, IntegerVector cx, IntegerVector cy, IntegerVector cz, IntegerVector wx, IntegerVector wy, IntegerVector wz, int boundary_conditions);
RcppExport SEXP _imager_extract_patches3D(SEXP imSEXP, SEXP cxSEXP, SEXP cySEXP, SEXP czSEXP, SEXP wxSEXP, SEXP wySEXP, SEXP wzSEXP, SEXP boundary_conditionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cx(cxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cy(cySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cz(czSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type wx(wxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type wy(wySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type wz(wzSEXP);
    Rcpp::traits::input_parameter< int >::type boundary_conditions(boundary_conditionsSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_patches3D(im, cx, cy, cz, wx, wy, wz, boundary_conditions));
    return rcpp_result_gen;
END_RCPP
}
// draw_image
NumericVector draw_image(NumericVector im, NumericVector sprite, int x, int y, int z, float opacity);
RcppExport SEXP _imager_draw_image(SEXP imSEXP, SEXP spriteSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP opacitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sprite(spriteSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type z(zSEXP);
    Rcpp::traits::input_parameter< float >::type opacity(opacitySEXP);
    rcpp_result_gen = Rcpp::wrap(draw_image(im, sprite, x, y, z, opacity));
    return rcpp_result_gen;
END_RCPP
}
// do_patchmatch
List do_patchmatch(NumericVector im1, NumericVector im2, unsigned int patch_width, unsigned int patch_height, unsigned int patch_depth, unsigned int nb_iterations, unsigned int nb_randoms, float occ_penalization, NumericVector guide);
RcppExport SEXP _imager_do_patchmatch(SEXP im1SEXP, SEXP im2SEXP, SEXP patch_widthSEXP, SEXP patch_heightSEXP, SEXP patch_depthSEXP, SEXP nb_iterationsSEXP, SEXP nb_randomsSEXP, SEXP occ_penalizationSEXP, SEXP guideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type im1(im1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type im2(im2SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type patch_width(patch_widthSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type patch_height(patch_heightSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type patch_depth(patch_depthSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nb_iterations(nb_iterationsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nb_randoms(nb_randomsSEXP);
    Rcpp::traits::input_parameter< float >::type occ_penalization(occ_penalizationSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type guide(guideSEXP);
    rcpp_result_gen = Rcpp::wrap(do_patchmatch(im1, im2, patch_width, patch_height, patch_depth, nb_iterations, nb_randoms, occ_penalization, guide));
    return rcpp_result_gen;
END_RCPP
}
// checkcoords
LogicalVector checkcoords(IntegerVector x, IntegerVector y, IntegerVector z, IntegerVector c, IntegerVector d);
RcppExport SEXP _imager_checkcoords(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP cSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(checkcoords(x, y, z, c, d));
    return rcpp_result_gen;
END_RCPP
}
// cimg_omp
int cimg_omp();
RcppExport SEXP _imager_cimg_omp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(cimg_omp());
    return rcpp_result_gen;
END_RCPP
}
// set_cimg_omp
int set_cimg_omp(int mode);
RcppExport SEXP _imager_set_cimg_omp(SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(set_cimg_omp(mode));
    return rcpp_result_gen;
END_RCPP
}
// has_omp
bool has_omp();
RcppExport SEXP _imager_has_omp() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(has_omp());
    return rcpp_result_gen;
END_RCPP
}
// px_split
List px_split(LogicalVector im, char axis, int nb);
RcppExport SEXP _imager_px_split(SEXP imSEXP, SEXP axisSEXP, SEXP nbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalVector >::type im(imSEXP);
    Rcpp::traits::input_parameter< char >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< int >::type nb(nbSEXP);
    rcpp_result_gen = Rcpp::wrap(px_split(im, axis, nb));
    return rcpp_result_gen;
END_RCPP
}
// read_video
SEXP read_video(SEXP vpipe, SEXP cimg_array, SEXP nframes, SEXP width, SEXP height, SEXP block_size);
RcppExport SEXP _imager_read_video(SEXP vpipeSEXP, SEXP cimg_arraySEXP, SEXP nframesSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP block_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type vpipe(vpipeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cimg_array(cimg_arraySEXP);
    Rcpp::traits::input_parameter< SEXP >::type nframes(nframesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type width(widthSEXP);
    Rcpp::traits::input_parameter< SEXP >::type height(heightSEXP);
    Rcpp::traits::input_parameter< SEXP >::type block_size(block_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(read_video(vpipe, cimg_array, nframes, width, height, block_size));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_imager_RGBtoHSL", (DL_FUNC) &_imager_RGBtoHSL, 1},
    {"_imager_RGBtoXYZ", (DL_FUNC) &_imager_RGBtoXYZ, 1},
    {"_imager_XYZtoRGB", (DL_FUNC) &_imager_XYZtoRGB, 1},
    {"_imager_HSLtoRGB", (DL_FUNC) &_imager_HSLtoRGB, 1},
    {"_imager_RGBtoHSV", (DL_FUNC) &_imager_RGBtoHSV, 1},
    {"_imager_HSVtoRGB", (DL_FUNC) &_imager_HSVtoRGB, 1},
    {"_imager_RGBtoHSI", (DL_FUNC) &_imager_RGBtoHSI, 1},
    {"_imager_HSItoRGB", (DL_FUNC) &_imager_HSItoRGB, 1},
    {"_imager_RGBtosRGB", (DL_FUNC) &_imager_RGBtosRGB, 1},
    {"_imager_sRGBtoRGB", (DL_FUNC) &_imager_sRGBtoRGB, 1},
    {"_imager_RGBtoYCbCr", (DL_FUNC) &_imager_RGBtoYCbCr, 1},
    {"_imager_YCbCrtoRGB", (DL_FUNC) &_imager_YCbCrtoRGB, 1},
    {"_imager_RGBtoYUV", (DL_FUNC) &_imager_RGBtoYUV, 1},
    {"_imager_YUVtoRGB", (DL_FUNC) &_imager_YUVtoRGB, 1},
    {"_imager_LabtoRGB", (DL_FUNC) &_imager_LabtoRGB, 1},
    {"_imager_RGBtoLab", (DL_FUNC) &_imager_RGBtoLab, 1},
    {"_imager_LabtoXYZ", (DL_FUNC) &_imager_LabtoXYZ, 1},
    {"_imager_XYZtoLab", (DL_FUNC) &_imager_XYZtoLab, 1},
    {"_imager_LabtosRGB", (DL_FUNC) &_imager_LabtosRGB, 1},
    {"_imager_sRGBtoLab", (DL_FUNC) &_imager_sRGBtoLab, 1},
    {"_imager_getXc", (DL_FUNC) &_imager_getXc, 4},
    {"_imager_getYc", (DL_FUNC) &_imager_getYc, 4},
    {"_imager_getZc", (DL_FUNC) &_imager_getZc, 4},
    {"_imager_getCc", (DL_FUNC) &_imager_getCc, 4},
    {"_imager_display_", (DL_FUNC) &_imager_display_, 2},
    {"_imager_display_list", (DL_FUNC) &_imager_display_list, 1},
    {"_imager_play", (DL_FUNC) &_imager_play, 4},
    {"_imager_select", (DL_FUNC) &_imager_select, 2},
    {"_imager_bucket_fill", (DL_FUNC) &_imager_bucket_fill, 8},
    {"_imager_bucket_select", (DL_FUNC) &_imager_bucket_select, 6},
    {"_imager_draw_circle", (DL_FUNC) &_imager_draw_circle, 7},
    {"_imager_draw_circle_", (DL_FUNC) &_imager_draw_circle_, 7},
    {"_imager_draw_rect_", (DL_FUNC) &_imager_draw_rect_, 8},
    {"_imager_draw_poly_", (DL_FUNC) &_imager_draw_poly_, 4},
    {"_imager_draw_text_", (DL_FUNC) &_imager_draw_text_, 7},
    {"_imager_deriche", (DL_FUNC) &_imager_deriche, 5},
    {"_imager_vanvliet", (DL_FUNC) &_imager_vanvliet, 5},
    {"_imager_isoblur_", (DL_FUNC) &_imager_isoblur_, 4},
    {"_imager_medianblur", (DL_FUNC) &_imager_medianblur, 3},
    {"_imager_boxblur", (DL_FUNC) &_imager_boxblur, 3},
    {"_imager_imlap", (DL_FUNC) &_imager_imlap, 1},
    {"_imager_boxblur_xy", (DL_FUNC) &_imager_boxblur_xy, 4},
    {"_imager_correlate", (DL_FUNC) &_imager_correlate, 4},
    {"_imager_convolve", (DL_FUNC) &_imager_convolve, 4},
    {"_imager_sharpen", (DL_FUNC) &_imager_sharpen, 6},
    {"_imager_get_gradient", (DL_FUNC) &_imager_get_gradient, 3},
    {"_imager_get_hessian", (DL_FUNC) &_imager_get_hessian, 2},
    {"_imager_diffusion_tensors", (DL_FUNC) &_imager_diffusion_tensors, 6},
    {"_imager_haar", (DL_FUNC) &_imager_haar, 3},
    {"_imager_FFT_complex", (DL_FUNC) &_imager_FFT_complex, 4},
    {"_imager_FFT_realim", (DL_FUNC) &_imager_FFT_realim, 3},
    {"_imager_FFT_realout", (DL_FUNC) &_imager_FFT_realout, 4},
    {"_imager_displacement", (DL_FUNC) &_imager_displacement, 7},
    {"_imager_blur_anisotropic", (DL_FUNC) &_imager_blur_anisotropic, 11},
    {"_imager_periodic_part", (DL_FUNC) &_imager_periodic_part, 1},
    {"_imager_hough_line_px", (DL_FUNC) &_imager_hough_line_px, 2},
    {"_imager_hough_line_grad", (DL_FUNC) &_imager_hough_line_grad, 3},
    {"_imager_hough_circle_", (DL_FUNC) &_imager_hough_circle_, 2},
    {"_imager_bgraph", (DL_FUNC) &_imager_bgraph, 1},
    {"_imager_interact_", (DL_FUNC) &_imager_interact_, 3},
    {"_imager_interp_xy", (DL_FUNC) &_imager_interp_xy, 6},
    {"_imager_interp_xyz", (DL_FUNC) &_imager_interp_xyz, 6},
    {"_imager_interp_xyzc", (DL_FUNC) &_imager_interp_xyzc, 6},
    {"_imager_interp_xyc", (DL_FUNC) &_imager_interp_xyc, 6},
    {"_imager_label", (DL_FUNC) &_imager_label, 3},
    {"_imager_blabel", (DL_FUNC) &_imager_blabel, 2},
    {"_imager_erode", (DL_FUNC) &_imager_erode, 4},
    {"_imager_berode", (DL_FUNC) &_imager_berode, 3},
    {"_imager_erode_rect", (DL_FUNC) &_imager_erode_rect, 4},
    {"_imager_berode_rect", (DL_FUNC) &_imager_berode_rect, 4},
    {"_imager_erode_square", (DL_FUNC) &_imager_erode_square, 2},
    {"_imager_berode_square", (DL_FUNC) &_imager_berode_square, 2},
    {"_imager_dilate", (DL_FUNC) &_imager_dilate, 4},
    {"_imager_bdilate", (DL_FUNC) &_imager_bdilate, 3},
    {"_imager_dilate_rect", (DL_FUNC) &_imager_dilate_rect, 4},
    {"_imager_bdilate_rect", (DL_FUNC) &_imager_bdilate_rect, 4},
    {"_imager_dilate_square", (DL_FUNC) &_imager_dilate_square, 2},
    {"_imager_bdilate_square", (DL_FUNC) &_imager_bdilate_square, 2},
    {"_imager_watershed", (DL_FUNC) &_imager_watershed, 3},
    {"_imager_distance_transform", (DL_FUNC) &_imager_distance_transform, 3},
    {"_imager_bdistance_transform", (DL_FUNC) &_imager_bdistance_transform, 3},
    {"_imager_mopening", (DL_FUNC) &_imager_mopening, 4},
    {"_imager_mopening_square", (DL_FUNC) &_imager_mopening_square, 2},
    {"_imager_mclosing_square", (DL_FUNC) &_imager_mclosing_square, 2},
    {"_imager_mclosing", (DL_FUNC) &_imager_mclosing, 4},
    {"_imager_reduce_wsum", (DL_FUNC) &_imager_reduce_wsum, 3},
    {"_imager_reduce_average", (DL_FUNC) &_imager_reduce_average, 2},
    {"_imager_reduce_prod", (DL_FUNC) &_imager_reduce_prod, 2},
    {"_imager_reduce_minmax", (DL_FUNC) &_imager_reduce_minmax, 3},
    {"_imager_reduce_list", (DL_FUNC) &_imager_reduce_list, 2},
    {"_imager_reduce_list2", (DL_FUNC) &_imager_reduce_list2, 2},
    {"_imager_reduce_med", (DL_FUNC) &_imager_reduce_med, 2},
    {"_imager_psort", (DL_FUNC) &_imager_psort, 2},
    {"_imager_porder", (DL_FUNC) &_imager_porder, 2},
    {"_imager_prank", (DL_FUNC) &_imager_prank, 2},
    {"_imager_autocrop_", (DL_FUNC) &_imager_autocrop_, 3},
    {"_imager_rotate", (DL_FUNC) &_imager_rotate, 4},
    {"_imager_rotate_xy", (DL_FUNC) &_imager_rotate_xy, 6},
    {"_imager_mirror", (DL_FUNC) &_imager_mirror, 2},
    {"_imager_permute_axes", (DL_FUNC) &_imager_permute_axes, 2},
    {"_imager_resize_doubleXY", (DL_FUNC) &_imager_resize_doubleXY, 1},
    {"_imager_resize_halfXY", (DL_FUNC) &_imager_resize_halfXY, 1},
    {"_imager_resize_tripleXY", (DL_FUNC) &_imager_resize_tripleXY, 1},
    {"_imager_imshift", (DL_FUNC) &_imager_imshift, 6},
    {"_imager_resize", (DL_FUNC) &_imager_resize, 11},
    {"_imager_warp", (DL_FUNC) &_imager_warp, 5},
    {"_imager_load_image", (DL_FUNC) &_imager_load_image, 1},
    {"_imager_save_image", (DL_FUNC) &_imager_save_image, 2},
    {"_imager_im_split", (DL_FUNC) &_imager_im_split, 3},
    {"_imager_im_append", (DL_FUNC) &_imager_im_append, 2},
    {"_imager_px_append", (DL_FUNC) &_imager_px_append, 2},
    {"_imager_patch_summary_cimg", (DL_FUNC) &_imager_patch_summary_cimg, 6},
    {"_imager_extract_fast", (DL_FUNC) &_imager_extract_fast, 6},
    {"_imager_extract_patches", (DL_FUNC) &_imager_extract_patches, 6},
    {"_imager_extract_patches3D", (DL_FUNC) &_imager_extract_patches3D, 8},
    {"_imager_draw_image", (DL_FUNC) &_imager_draw_image, 6},
    {"_imager_do_patchmatch", (DL_FUNC) &_imager_do_patchmatch, 9},
    {"_imager_checkcoords", (DL_FUNC) &_imager_checkcoords, 5},
    {"_imager_cimg_omp", (DL_FUNC) &_imager_cimg_omp, 0},
    {"_imager_set_cimg_omp", (DL_FUNC) &_imager_set_cimg_omp, 1},
    {"_imager_has_omp", (DL_FUNC) &_imager_has_omp, 0},
    {"_imager_px_split", (DL_FUNC) &_imager_px_split, 3},
    {"_imager_read_video", (DL_FUNC) &_imager_read_video, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_imager(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
